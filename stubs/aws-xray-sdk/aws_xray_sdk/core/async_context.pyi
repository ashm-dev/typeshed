from _typeshed import Incomplete
from asyncio.events import AbstractEventLoop
from typing_extensions import ParamSpecArgs, ParamSpecKwargs

from .context import Context as _Context

class AsyncContext(_Context):
    def __init__(
        self, *args: ParamSpecArgs, loop: Incomplete | None = None, use_task_factory: bool = True, **kwargs: ParamSpecKwargs
    ) -> None: ...
    def clear_trace_entities(self) -> None: ...

class TaskLocalStorage:
    def __init__(self, loop: AbstractEventLoop | None = None) -> None: ...
    def __setattr__(self, name: str, value: str) -> None: ...
    def __getattribute__(self, item: str) -> str: ...
    def clear(self) -> None: ...

def task_factory(loop: AbstractEventLoop, coro): ...
