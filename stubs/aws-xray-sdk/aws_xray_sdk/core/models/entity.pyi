from _typeshed import Incomplete
from logging import Logger
from traceback import StackSummary

log: Logger
_common_invalid_name_characters: str
_valid_annotation_key_characters: str
ORIGIN_TRACE_HEADER_ATTR_KEY: str

class Entity:
    id: Incomplete | None
    name: str
    start_time: float
    parent_id: Incomplete | None
    sampled: bool
    in_progress: bool
    http: Incomplete
    annotations: Incomplete
    metadata: Incomplete
    aws: Incomplete
    cause: Incomplete
    subsegments: Incomplete
    end_time: float
    def __init__(self, name: str, entity_id: Incomplete | None = None) -> None: ...
    def close(self, end_time: float | None = None) -> None: ...
    def add_subsegment(self, subsegment) -> None: ...
    def remove_subsegment(self, subsegment) -> None: ...
    def put_http_meta(self, key: str, value) -> None: ...
    def put_annotation(self, key: str, value) -> None: ...
    def put_metadata(self, key: str, value, namespace: str = "default") -> None: ...
    def set_aws(self, aws_meta) -> None: ...
    throttle: bool
    def add_throttle_flag(self) -> None: ...
    fault: bool
    def add_fault_flag(self) -> None: ...
    error: bool
    def add_error_flag(self) -> None: ...
    def apply_status_code(self, status_code: int | None) -> None: ...
    def add_exception(self, exception: Exception, stack: StackSummary, remote: bool = False) -> None: ...
    def save_origin_trace_header(self, trace_header) -> None: ...
    def get_origin_trace_header(self): ...
    def serialize(self) -> str: ...
    def to_dict(self): ...
    def _check_ended(self) -> None: ...
    def _generate_random_id(self) -> str: ...
