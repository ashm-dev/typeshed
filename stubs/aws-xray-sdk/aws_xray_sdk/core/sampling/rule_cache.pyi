from _typeshed import Incomplete

TTL: int

class RuleCache:
    def __init__(self) -> None: ...
    def get_matched_rule(self, sampling_req, now: int) -> Incomplete | None: ...
    def load_rules(self, rules) -> None: ...
    def load_targets(self, targets_dict: dict) -> None: ...
    def _load_rules(self, rules) -> None: ...
    def _load_targets(self, targets_dict: dict) -> None: ...
    def _is_expired(self, now: int) -> bool: ...
    @property
    def rules(self) -> list: ...
    @rules.setter
    def rules(self, v: list) -> None: ...
    @property
    def last_updated(self) -> Incomplete | None: ...
    @last_updated.setter
    def last_updated(self, v) -> None: ...
